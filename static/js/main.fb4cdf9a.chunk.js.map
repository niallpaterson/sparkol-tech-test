{"version":3,"sources":["utility/Layout/Layout.module.scss","utility/Button/Button.module.scss","utility/Box/Box.module.scss","component/WelcomePage/WelcomePage.module.scss","utility/Input/Input.module.scss","utility/Layout/index.js","utility/Layout/Layout.jsx","utility/Button/index.js","utility/Button/Button.jsx","utility/Box/index.js","utility/Box/Box.jsx","component/WelcomePage/index.js","component/WelcomePage/WelcomePage.jsx","utility/Input/index.js","utility/Input/Input.jsx","component/LoginBox/index.js","component/LoginBox/LoginBox.jsx","container/Authenticate/index.js","container/Authenticate/Authenticate.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Layout","layout","component","className","styles","Button","type","text","clickHandler","button","onClick","Box","kind","children","box","layoutStyles","WelcomePage","user","logout","greeting","name","Input","placeholder","changeHandler","onChange","LoginBox","attemptLogin","setUserName","setPassword","id","e","target","value","Authenticate","useState","setUser","token","setToken","tokenIsValid","setTokenIsValid","username","setUsername","password","resetCredentials","a","fetch","method","headers","body","JSON","stringify","then","res","status","login","alert","catch","error","finally","json","useEffect","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fb4cdf9a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexCenterRow\":\"Layout_flexCenterRow__2gaH9\",\"flexCenterCol\":\"Layout_flexCenterCol__36Xnt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Button_login__2h36o\",\"logout\":\"Button_logout__33i2R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Box_box__1BUcy\",\"frosted\":\"Box_frosted__3J0Pr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"greeting\":\"WelcomePage_greeting__3iFOX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Input_login__3YJJQ\"};","import Layout from \"./Layout\";\n\nexport default Layout;\n","import React from \"react\";\nimport styles from \"./Layout.module.scss\";\n\nconst Layout = (layout, component) => (\n  <div className={styles[layout]}>\n    {component}\n  </div>\n);\n\nexport default Layout;\n","import Button from \"./Button\";\n\nexport default Button;\n","import React from \"react\";\nimport styles from \"./Button.module.scss\";\n\nconst Button = ({ type, text, clickHandler }) => (\n  <button className={`${styles.button} ${styles[type]}`} onClick={clickHandler}> \n    {text}\n  </button>\n);\n\nexport default Button;\n","import Box from \"./Box\";\n\nexport default Box;\n","import React from \"react\";\nimport styles from \"./Box.module.scss\";\nimport layoutStyles from \"../Layout/Layout.module.scss\"\n\nconst Box = ({ kind, layout, children }) => (\n  <div className={`${styles.box} ${styles[kind]} ${layoutStyles[layout]}` }> \n  {children}\n  </div>\n);\n\nexport default Box;\n","import WelcomePage from \"./WelcomePage\";\n\nexport default WelcomePage;\n","import React from \"react\";\nimport Button from \"../../utility/Button\";\nimport styles from \"./WelcomePage.module.scss\"\nimport Box from \"../../utility/Box\";\n\nconst WelcomePage = ({ user, logout }) => (\n  <Box layout=\"flexCenterCol\">\n    <p className={styles.greeting}> {`ðŸ‘‹ Hey there ${user.name} ðŸ˜€!`} </p>\n    <Button type=\"logout\" text=\"Logout\" clickHandler={logout} />\n  </Box>\n);\n\nexport default WelcomePage;\n","import Input from \"./Input.jsx\";\n\nexport default Input;\n","import React from \"react\";\nimport styles from \"./Input.module.scss\";\n\nconst Input = ({ placeholder, type, kind, changeHandler }) => (\n  <input\n    className={styles[kind]} \n    type={type}\n    placeholder={placeholder} \n    kind={kind} \n    onChange={changeHandler}\n  />\n);\n\nexport default Input;\n","import LoginBox from \"./LoginBox\";\n\nexport default LoginBox;\n","import React from \"react\";\nimport Input from \"../../utility/Input\";\nimport Button from \"../../utility/Button\";\nimport Box from \"../../utility/Box\";\n\nconst LoginBox = ({ attemptLogin, setUserName, setPassword }) => (\n  <Box kind=\"frosted\" layout=\"flexCenterCol\">\n    <Input \n      id=\"username\" \n      placeholder=\"username\" \n      kind=\"login\"\n      type=\"text\"\n      changeHandler={(e) => setUserName(e.target.value)} \n    />\n    <Input \n      id=\"password\" \n      placeholder=\"password\" \n      kind=\"login\" \n      type=\"password\"\n      changeHandler={(e) => setPassword(e.target.value)} \n    />\n    <Button \n      type=\"login\" \n      text=\"Login\" \n      clickHandler={attemptLogin}\n    />\n  </Box>\n);\n\nexport default LoginBox;\n","import Authenticate from \"./Authenticate\";\n\nexport default Authenticate;\n","import React, { useState, useEffect } from \"react\";\nimport Layout from \"../../utility/Layout\";\nimport WelcomePage from \"../../component/WelcomePage\";\nimport LoginBox from \"../../component/LoginBox\";\n\n\nconst Authenticate = () => {\n  const [user, setUser] = useState({});\n  const [token, setToken] = useState(null);\n  const [tokenIsValid, setTokenIsValid] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const logout = () => {\n    setUser({});\n    setToken(null);\n    setTokenIsValid(false);\n  };\n\n  const resetCredentials = () => {\n    setUsername('');\n    setPassword('');\n  };\n  \n  const attemptLogin = async () => {\n    await fetch('http://localhost:3333/login', { \n      method: 'POST', \n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({ username, password }),  \n    })\n    .then((res) => res.status === 200 ? login(res) : alert('Incorrect Username or Password ðŸ˜ž'))\n    .catch(error => alert(error))\n    .finally(resetCredentials);\n   };\n\n   const login = async (res) => {\n    const { user, token } = await res.json();\n    setUser(user);\n    setToken(token);\n  };\n\n   const validateToken = () => {\n     if (!token) return;\n     fetch('http://localhost:3333/verifyToken', { \n       headers: { 'Authorization': `Bearer ${token}` }\n      })\n      .then((res) => setTokenIsValid(res.status === 200))\n      .catch((error) => console.log(error));\n   };\n\n   useEffect(validateToken);\n\n   return tokenIsValid \n   ? Layout('flexCenterCol', <WelcomePage user={user} logout={logout} />) \n   : Layout('flexCenterRow', <LoginBox attemptLogin={attemptLogin} setUserName={setUsername} setPassword={setPassword} />);\n};\n\nexport default Authenticate;\n","import React from 'react';\nimport './App.css';\nimport Authenticate from \"./container/Authenticate\"\n\nconst App = () => <Authenticate />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}